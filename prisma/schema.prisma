generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  name              String
  email             String    @unique
  password          String
  role              String
  active            Boolean   @default(true)
  lastLogin         DateTime?
  resetToken        String?
  resetTokenExpires DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  member            Member?   @relation("UserMemberRelation")
  memberId          Int?      // This field still exists. If Member.userId is the true FK for the 
 
  @@map("users")
}

model Zone {
  id        Int       @id @default(autoincrement())
  name      String
  active    Boolean   @default(true)
  locations Location[] // Add this field for the reverse relation
  chapters  Chapter[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("zones")
}

model Location {
  id        Int       @id @default(autoincrement())
  zone      Zone      @relation(fields: [zoneId], references: [id])
  zoneId    Int
  location  String
  chapters  Chapter[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) // Note: This was @default(now()), typically updatedAt should be @updatedAt

  @@map("locations")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) // Note: Consider @updatedAt

  @@map("category")
}

model SiteSetting {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) // Note: Consider @updatedAt

  @@map("site_settings")
}

model Training {
  id            Int      @id @default(autoincrement())
  trainingDate  DateTime
  trainingTopic String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) // Note: Consider @updatedAt

  @@map("trainings")
}

model Message {
  id         Int      @id @default(autoincrement())
  heading    String   @db.VarChar(255)
  powerteam  String   @db.VarChar(100)
  message    String   @db.Text
  attachment String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) // Note: Consider @updatedAt
}

model Chapter {
  id                 Int      @id @default(autoincrement())
  name               String
  zones              Zone     @relation(fields: [zoneId], references: [id])
  zoneId             Int
  location           Location @relation(fields: [locationId], references: [id])
  locationId         Int
  date               DateTime
  meetingday         String
  status             Boolean  @default(false)
  venue              String
  bankopeningbalance Decimal? @db.Decimal(10, 2)
  bankclosingbalance Decimal? @db.Decimal(10, 2)
  cashopeningbalance Decimal? @db.Decimal(10, 2)
  cashclosingbalance Decimal? @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members Member[]
  packages Package[] // Added relation to Package model
  meetings ChapterMeeting[] // Relation to ChapterMeeting model
  visitors Visitor[] @relation("VisitorHomeChapter") // Relation to Visitor model
  transactions Transaction[] // Added relation to Transaction model

  @@map("chapters")
}

model Member {
  id                      Int       @id @default(autoincrement())
  memberName              String
  chapterId               Int?
  chapter                 Chapter?  @relation(fields: [chapterId], references: [id])
  category                String
  businessCategory        String
  gender                  String
  dateOfBirth             DateTime
  mobile1                 String
  mobile2                 String?
  gstNo                   String?
  organizationName        String
  businessTagline         String?
  organizationMobileNo    String
  organizationLandlineNo  String?
  organizationEmail       String?
  orgAddressLine1         String
  orgAddressLine2         String?
  orgLocation             String
  orgPincode              String
  organizationWebsite     String?   @db.Text
  organizationDescription String?   @db.Text

  addressLine1 String
  location     String
  addressLine2 String?
  pincode      String
  hoExpiryDate DateTime?
  venueExpiryDate DateTime?

  specificAsk  String? @db.Text
  specificGive String? @db.Text
  clients      String? @db.Text

  profilePicture1 String?
  profilePicture2 String?
  profilePicture3 String?
  email    String @unique
  password String

  users    User?   @relation("UserMemberRelation", fields: [userId], references: [id])
  userId   Int?    @unique // Foreign key to User model

  memberships Membership[] // Relation to memberships
  
  invitedVisitors Visitor[] // Visitors invited by this member
  meetingAttendances MeetingAttendance[] // Attendance records for this member

  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("members")
}

model Package {
  id            Int      @id @default(autoincrement())
  packageName   String
  periodMonths  Int      // Period in months: 1, 3, 6, 12
  isVenueFee    Boolean  @default(false)
  chapterId     Int?
  chapter       Chapter? @relation(fields: [chapterId], references: [id])
  basicFees     Decimal  @db.Decimal(10, 2)
  gstRate       Decimal  @db.Decimal(5, 2)
  gstAmount     Decimal  @db.Decimal(10, 2) // Calculated based on rate and basic fees
  totalFees     Decimal  @db.Decimal(10, 2) // basic + gst
  
  memberships   Membership[]
  
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("packages")
}

model Membership {
  id              Int      @id @default(autoincrement())
  memberId        Int
  member          Member   @relation(fields: [memberId], references: [id])
  invoiceNumber   String   @unique
  invoiceDate     DateTime
  
  packageId       Int
  package         Package  @relation(fields: [packageId], references: [id])
  packageStartDate DateTime
  packageEndDate   DateTime
  
  basicFees       Decimal  @db.Decimal(10, 2)
  
  cgstRate        Decimal? @db.Decimal(5, 2)
  cgstAmount      Decimal? @db.Decimal(10, 2)
  
  sgstRate        Decimal? @db.Decimal(5, 2)
  sgstAmount      Decimal? @db.Decimal(10, 2)
  
  igstRate        Decimal? @db.Decimal(5, 2)
  igstAmount      Decimal? @db.Decimal(10, 2)
  
  totalTax        Decimal? @db.Decimal(10, 2)
  totalAmount     Decimal? @db.Decimal(10, 2)
  totalFees       Decimal  @db.Decimal(10, 2) 
  
  paymentDate     DateTime?
  paymentMode     String?
  
  // Payment method specific fields
  chequeNumber    String?
  chequeDate      DateTime?
  bankName        String?
  neftNumber      String?
  utrNumber       String?
  
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("memberships")
}

model ChapterMeeting {
  id           Int      @id @default(autoincrement())
  date         DateTime
  meetingTime  String
  meetingTitle String
  meetingVenue String
  
  chapter      Chapter  @relation(fields: [chapterId], references: [id])
  chapterId    Int
  
  visitors     Visitor[]
  attendances  MeetingAttendance[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("chapter_meetings")
}

model Visitor {
  id                Int       @id @default(autoincrement())
  // Basic Details
  name              String
  email             String?
  gender            String
  dateOfBirth       DateTime?
  mobile1           String
  mobile2           String?
  isCrossChapter    Boolean   @default(false)
  
  // Chapter & Meeting Information
  meeting           ChapterMeeting  @relation(fields: [meetingId], references: [id])
  meetingId         Int
  
  homeChapter       Chapter?  @relation(name: "VisitorHomeChapter", fields: [chapterId], references: [id])
  chapterId         Int?      // Home chapter for cross-chapter visitors
  chapter           String    // Chapter name for non-members
  
  invitedById       Int?
  invitedByMember   Member?   @relation(fields: [invitedById], references: [id])
  
  // Business Details
  category          String?
  businessDetails   String?   @db.Text
  
  // Address Details
  addressLine1      String?
  addressLine2      String?
  city              String?
  pincode           String?
  
  // Status
  status            String?    // e.g., "Invited", "Confirmed", "Attended", "No-Show"
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("visitors")
}

model MeetingAttendance {
  id               Int           @id @default(autoincrement())
  
  meeting          ChapterMeeting @relation(fields: [meetingId], references: [id])
  meetingId        Int
  
  member           Member        @relation(fields: [memberId], references: [id])
  memberId         Int
  
  isPresent        Boolean       @default(false)
  
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@unique([meetingId, memberId])
  @@map("meeting_attendances")
}

model Transaction {
  id              Int      @id @default(autoincrement())
  chapterId       Int
  chapter         Chapter  @relation(fields: [chapterId], references: [id])
  date            DateTime
  accountType     String   // 'cash' or 'bank'
  transactionType String   // 'credit' or 'debit'
  amount          Decimal  @db.Decimal(10, 2)
  description     String?
  reference       String?
  hasInvoice      Boolean  @default(false)
  gstRate         Decimal? @db.Decimal(5, 2)
  gstAmount       Decimal? @db.Decimal(10, 2)
  invoiceNumber   String?
  partyName       String?
  partyGSTNo      String?
  partyAddress    String?
  invoiceImage    String?  // Path to the uploaded invoice image
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("transactions")
}
